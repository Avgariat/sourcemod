#include <sourcemod>

#pragma semicolon 1
#pragma newdecls required

char filelog_basic[PLATFORM_MAX_PATH];
char filelog[PLATFORM_MAX_PATH];
char filelog_save_in[] = "logs/ChatLogAS/";
char PluginInfoAS[] = "\n///* This file has been generated by \"[CS:GO] AS Chat Log\" plugin which has been created for game servers of ArenaSkilla.pl. *///\n///* Author: Avgariat *///\n";
char log_prefix[] = "av_say";
char vip_override[] = "ws_vip";

#define SIZE_TAGTYPE 64
enum en_type
{
	String:say[SIZE_TAGTYPE],
	String:say_team[SIZE_TAGTYPE],
	String:say_vip[SIZE_TAGTYPE],
	String:sm_say[SIZE_TAGTYPE],
	String:sm_chat[SIZE_TAGTYPE],
	String:sm_csay[SIZE_TAGTYPE],
	String:sm_tsay[SIZE_TAGTYPE],
	String:sm_msay[SIZE_TAGTYPE],
	String:sm_hsay[SIZE_TAGTYPE],
	String:sm_psay[SIZE_TAGTYPE]
}
int TagType[en_type];

public Plugin myinfo =
{
	name = "[CS:GO] AS Chat Log",
	author = "Avgariat",
	description = "Chat Logger",
	version = "0.2",
	url = "http://arenaskilla.pl"
};

public void OnPluginStart()
{
	LoadTranslations("common.phrases.txt");
	
	AddCommandListener(CommandsHook_sm, "sm_say");
	AddCommandListener(CommandsHook_sm, "sm_chat");
	AddCommandListener(CommandsHook_sm, "sm_csay");
	AddCommandListener(CommandsHook_sm, "sm_tsay");
	AddCommandListener(CommandsHook_sm, "sm_msay");
	AddCommandListener(CommandsHook_sm, "sm_hsay");
	AddCommandListener(CommandsHook_sm, "sm_psay");
	
	FormatEx(TagType[say], SIZE_TAGTYPE-1, "Chat        ");
	FormatEx(TagType[say_team], SIZE_TAGTYPE-1, "Team_Chat   ");
	FormatEx(TagType[say_vip], SIZE_TAGTYPE-1, "Vip_Chat    ");
	FormatEx(TagType[sm_say], SIZE_TAGTYPE-1, "All_Chat    ");
	FormatEx(TagType[sm_chat], SIZE_TAGTYPE-1, "Admin_Chat  ");
	FormatEx(TagType[sm_csay], SIZE_TAGTYPE-1, "Center_Chat ");
	FormatEx(TagType[sm_tsay], SIZE_TAGTYPE-1, "Corner_Chat ");
	FormatEx(TagType[sm_msay], SIZE_TAGTYPE-1, "Panel_Chat  ");
	FormatEx(TagType[sm_hsay], SIZE_TAGTYPE-1, "Hint_Chat   ");
	FormatEx(TagType[sm_psay], SIZE_TAGTYPE-1, "Private_Chat");
	
	char date[16];
	FormatTime(date, sizeof(date), "%Y-%m-%d", GetTime());
	BuildPath(Path_SM, filelog_basic, sizeof(filelog_basic), filelog_save_in);
	if(!DirExists(filelog_basic))
	{
		CreateDirectory(filelog_basic, OctalToDecimal(770));
		if(!DirExists(filelog_basic))
			SetFailState("Failed to create directory at /sourcemod/logs/ChatLogAS - Please, create it manually.");
	}
	Format(filelog, sizeof(filelog), "%s%s_%s.log", filelog_basic, log_prefix, date);
	if(!FileExists(filelog))
		LogToFileEx(filelog, PluginInfoAS);
	CreateTimer(60.0, TimerDataChecker, _, TIMER_REPEAT);
}

public void SaveLogMessage(int client, const char[] type, const char[] message)
{
	if(client < 1)
	{
		LogToFileEx(filelog, "%s | (STEAM_0:0:000000000)CONSOLE: %s", type, message);
		return;
	}
	if(!IsValidClient(client))
		return;
	
	char authid[64];
	GetClientAuthId(client, AuthId_Steam2, authid, sizeof(authid));
	if(strlen(authid) < 19)
		Format(authid, sizeof(authid), "(%s) ", authid);
	else
		Format(authid, sizeof(authid), "(%s)", authid);
	LogToFileEx(filelog, "%s | %s%N: %s", type, authid, client, message);
}

public Action OnClientSayCommand(int client, const char[] command, const char[] sArgs)
{
	int startpos = 0;
	//char type[64] = "Chat        ";
	char type[SIZE_TAGTYPE];
	strcopy(type, SIZE_TAGTYPE-1, TagType[say]);
	if(sArgs[startpos] != '@')
	{
		if(!StrEqual("say_team", command) || sArgs[startpos] != '*')
		{
			SaveLogMessage(client, type, sArgs);
			return Plugin_Continue;
		}
		else if(!CheckCommandAccess(client, vip_override, ADMFLAG_CUSTOM1))
		{
			SaveLogMessage(client, type, sArgs);
			return Plugin_Continue;
		}
		else
		{
			startpos++;
			//type = "Vip_Chat    ";
			strcopy(type, SIZE_TAGTYPE-1, TagType[say_vip]);
			SaveLogMessage(client, type, sArgs[startpos]);
			return Plugin_Continue;
		}
	}
	startpos++;
	
	if(StrEqual("say", command))
	{
		if(sArgs[startpos] != '@') // sm_say @
		{
			if(!CheckCommandAccess(client, "sm_say", ADMFLAG_CHAT))
			{
				SaveLogMessage(client, type, sArgs);
				return Plugin_Continue;
			}
			
			//type = "All_Chat    ";
			strcopy(type, SIZE_TAGTYPE-1, TagType[sm_say]);
			SaveLogMessage(client, type, sArgs[startpos]);
			return Plugin_Continue;
		}
		startpos++;
		
		if(sArgs[startpos] != '@') // sm_psay @@
		{
			if(!CheckCommandAccess(client, "sm_psay", ADMFLAG_CHAT))
			{
				SaveLogMessage(client, type, sArgs);
				return Plugin_Continue;
			}
			
			char arg[64];
			int len = BreakString(sArgs[startpos], arg, sizeof(arg));
			int target = FindTarget(client, arg, true, false);
			
			if(target == -1 || len == -1)
			{
				SaveLogMessage(client, type, sArgs);
				return Plugin_Continue;
			}
			
			char AlteredMessage[256];
			Format(AlteredMessage, sizeof(AlteredMessage), "(To %N) %s", target, sArgs[startpos+len]);
			//type = "Private_Chat";
			strcopy(type, SIZE_TAGTYPE-1, TagType[sm_psay]);
			
			SaveLogMessage(client, type, AlteredMessage);
			return Plugin_Continue;
		}
		startpos++;
		
		//sm_csay @@@
		if(!CheckCommandAccess(client, "sm_csay", ADMFLAG_CHAT))
		{
			SaveLogMessage(client, type, sArgs);
			return Plugin_Continue;
		}
		
		//type = "Center_Chat ";
		strcopy(type, SIZE_TAGTYPE-1, TagType[sm_csay]);
		SaveLogMessage(client, type, sArgs[startpos]);
		return Plugin_Continue;
	}
	else if(StrEqual("say_team", command))
	{
		if(!CheckCommandAccess(client, "sm_chat", ADMFLAG_CHAT)) //sm_chat u@, say_team @
		{
			//type = "Team_Chat   ";
			strcopy(type, SIZE_TAGTYPE-1, TagType[say_team]);
			SaveLogMessage(client, type, sArgs);
			return Plugin_Continue;
		}
		
		//type = "Admin_Chat  ";
		strcopy(type, SIZE_TAGTYPE-1, TagType[sm_chat]);
		SaveLogMessage(client, type, sArgs[startpos]);
		return Plugin_Continue;
	}
	
	return Plugin_Continue;
}

public Action CommandsHook_sm(int client, const char[] command, int args)
{
	char message[256];
	GetCmdArgString(message, sizeof(message));
	//char type[64];
	char type[SIZE_TAGTYPE];
	
	if(StrEqual("sm_say", command))
	{
		//type = "All_Chat    ";
		strcopy(type, SIZE_TAGTYPE-1, TagType[sm_say]);
	}
	else if(StrEqual("sm_chat", command))
	{
		//type = "Admin_Chat  ";
		strcopy(type, SIZE_TAGTYPE-1, TagType[sm_chat]);
	}
	else if(StrEqual("sm_csay", command))
	{
		//type = "Center_Chat ";
		strcopy(type, SIZE_TAGTYPE-1, TagType[sm_csay]);
	}
	else if(StrEqual("sm_tsay", command))
	{
		//type = "Corner_Chat ";
		strcopy(type, SIZE_TAGTYPE-1, TagType[sm_tsay]);
	}
	else if(StrEqual("sm_msay", command))
	{
		//type = "Panel_Chat  ";
		strcopy(type, SIZE_TAGTYPE-1, TagType[sm_msay]);
	}
	else if(StrEqual("sm_hsay", command))
	{
		//type = "Hint_Chat   ";
		strcopy(type, SIZE_TAGTYPE-1, TagType[sm_hsay]);
	}
	else if(StrEqual("sm_psay", command))
	{
		//type = "Private_Chat";
		strcopy(type, SIZE_TAGTYPE-1, TagType[sm_psay]);
	}
	else
		return;
	SaveLogMessage(client, type, message);
}

public Action TimerDataChecker(Handle timer)
{
	char date[16];
	FormatTime(date, sizeof(date), "%Y-%m-%d", GetTime());
	Format(filelog, sizeof(filelog), "%s%s_%s.log", filelog_basic, log_prefix, date);
	if(!FileExists(filelog))
		LogToFileEx(filelog, PluginInfoAS);
}

stock bool IsValidClient(int client, bool bAlive = false)
{
	if(client >= 1 && client <= MaxClients && IsClientInGame(client) && !IsFakeClient(client) && (!bAlive || IsPlayerAlive(client)))
		return true;
	return false;
}

stock int OctalToDecimal(int n)
{
	int d = 0;
	if(n<100 || n>999)
		return 493;
	d+= n%10*1;
	n/= 10;
	d+= n%10*8;
	n/= 10;
	d+= n%10*64;
	return d;
}